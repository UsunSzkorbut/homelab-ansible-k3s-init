---
- name: Prepare pre-requisites
  tags:
    - prereq
  block:
    - name: Prepare pre-requisites | Create temporary directory
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

- name: Install Helm
  tags:
    - helm
  block:
    - name: Install Helm | Download Helm installation script
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        dest: "{{ helm.path.script }}"
        mode: '0755'

    - name: Install Helm | Run Helm installation script
      ansible.builtin.command: "{{ helm.path.script }}"
      args:
        creates: /usr/local/bin/helm
      register: reg_helm_install
      changed_when: false

    - name: Install Helm | Add /usr/local/bin to PATH
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: 'export PATH=$PATH:/usr/local/bin'
      when: reg_helm_install.rc == 0

  rescue:
    - name: ERROR | Install Helm | Display error lines
      tags:
        - error_handling
      ansible.builtin.debug:
        msg: "{{ reg_helm_install.stderr_lines }}"
      notify: "remove_tmp"

  always:
    - name: Install Helm | Verify Helm installation
      tags:
        - verify
      ansible.builtin.debug:
        msg: "{{ reg_helm_install.stdout_lines }}"

- name: Add Helm Repository
  tags:
    - helm
  block:
    - name: Add Helm repository | Rancher
      tags:
        - rancher
      kubernetes.core.helm_repository:
        name: rancher-latest
        repo_url: https://releases.rancher.com/server-charts/latest

    - name: Add Helm repository | Cert-manager
      tags:
        - cert_manager
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io

    - name: Add Helm repository | Longhorn
      tags:
        - longhorn
      kubernetes.core.helm_repository:
        name: longhorn
        repo_url: https://charts.longhorn.io

  rescue:
    - name: ERROR | Add Helm repository | Notify about failure
      tags:
        - error_handling
      ansible.builtin.debug:
        msg: "Adding Helm repositories failed. Check the logs for further information."
      notify: "remove_tmp"

- name: Metallb
  tags:
    - metallb
  block:
    - name: Metallb | Download manifest to the cluster
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/metallb/metallb/{{ metallb.version }}/config/manifests/metallb-native.yaml
        dest: "{{ metallb.path.manifest }}"
        mode: '0664'

    - name: Metallb | Apply manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ metallb.path.manifest }}"

    - name: Metallb | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ metallb.namespace }}"
        wait_sleep: 10
        wait_timeout: 360

    - name: Metallb | Create IPAddressPool manifest
      ansible.builtin.template:
        src: ipaddresses.yml.j2
        dest: "{{ metallb.path.ipaddresses }}"

    - name: Metallb | Apply IPAddressPool manifest
      kubernetes.core.k8s:
        state: present
        src: "{{ metallb.path.ipaddresses }}"

    - name: Metallb | Create L2Advertisement manifest
      ansible.builtin.template:
        src: layer2.yml.j2
        dest: "{{ metallb.path.layer2 }}"

    - name: Metallb | Apply L2Advertisement manifest
      kubernetes.core.k8s:
        state: present
        src: "{{ metallb.path.layer2 }}"

  rescue:
    - name: ERROR | Metallb | Notify about failure
      tags:
        - error_handling
      ansible.builtin.debug:
        msg: "Metallb deployment failed. Check the logs for further information."
      notify: "remove_tmp"

- name: Nginx Ingress Controller
  tags:
    - nginx
  block:
    - name: Nginx Ingress Controller | Git clone branch # TODO fails here
      ansible.builtin.git:
        repo: https://github.com/nginxinc/kubernetes-ingress.git
        dest: "{{ nginxingresscontroller.path.install }}"
        single_branch: yes
        version: "{{ nginxingresscontroller.version }}"

    - name: Nginx Ingress Controller | Apply Namespace and Service Account manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path['ns-and-sa'] }}"

    - name: Nginx Ingress Controller | Apply rbac manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path.rbac }}"

    - name: Nginx Ingress Controller | Apply nginx-config-map manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path['nginx-config'] }}"

    - name: Nginx Ingress Controller | Apply ingress-class manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path['ingress-class'] }}"

    - name: Nginx Ingress Controller | Download CustomResourceDefinitions manifest
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/nginxinc/kubernetes-ingress/v3.7.0/deploy/crds.yaml
        dest: "{{ nginxingresscontroller.path.crds }}"
        mode: '0664'

    - name: Nginx Ingress Controller | Apply CustomResourceDefinitions manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path.crds }}"

    - name: Nginx Ingress Controller | Apply nginx-ingress manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path['nginx-ingress'] }}"

    - name: Nginx Ingress Controller | Apply nginx-ingress manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ nginxingresscontroller.path.loadbalancer }}"

    - name: Nginx Ingress Controller | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: nginx-ingress
        wait_sleep: 10
        wait_timeout: 360

  rescue:
  - name: ERROR | Nginx Ingress Controller | Notify about failure
    tags:
      - error_handling
    ansible.builtin.debug:
      msg: "Configuring Nginx Ingress Controller failed. Check the logs for further information."
    notify: "remove_tmp"

- name: Cert-manager
  tags:
    - cert_manager
  block:
    - name: Cert-manager | Download CustomResourceDefinitions manifest
      ansible.builtin.get_url:
        url: https://github.com/jetstack/cert-manager/releases/download/{{ cert_manager.version }}/cert-manager.crds.yaml
        dest: "{{ cert_manager.path.creds }}"
        mode: '0664'

    - name: Cert-manager | Apply CustomResourceDefinitions manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ cert_manager.path.creds }}"

    - name: Cert-manager | Install using Helm
      tags:
        - helm
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ cert_manager.version }}"
        release_namespace: "{{ cert_manager.namespace }}"
        create_namespace: true

    - name: Cert-manager | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ cert_manager.namespace }}"
        wait_sleep: 10
        wait_timeout: 360

  rescue:
  - name: ERROR | Cert-manager | Notify about failure
    tags:
      - error_handling
    ansible.builtin.debug:
      msg: "Configuring Cert-manager failed. Check the logs for further information."
    notify: "remove_tmp"

- name: External-DNS for PiHole # TODO Add error handling for block
  tags:
    - externaldns
  block:
    - name: External-DNS | Creating Namespace
      kubernetes.core.k8s:
        name: "{{ externaldns.namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: External-DNS | Creating Secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: pihole-password
            namespace: "{{ externaldns.namespace }}"
          type: Opaque
          data:
            EXTERNAL_DNS_PIHOLE_PASSWORD: "{{ externaldns.piholepassword | b64encode }}"

    - name: External-DNS | Create Depoloyment manifest
      ansible.builtin.template:
        src: externaldns.yml.j2
        dest: "{{ externaldns.path.manifest }}"

    - name: External-DNS | Apply Depoloyment manifest
      kubernetes.core.k8s:
        state: present
        src: "{{ externaldns.path.manifest }}"
  when: install_externaldns

  rescue:
  - name: ERROR | External-DNS | Notify about failure
    tags:
      - error_handling
    ansible.builtin.debug:
      msg: "External-DNS deployment failed. Check the logs for further information."
    notify: "remove_tmp"

- name: Longhorn
  tags:
    - longhorn
  block:
    - name: Longhorn | Install using Helm
      tags:
        - helm
      kubernetes.core.helm:
        name: longhorn
        chart_ref: longhorn/longhorn
        chart_version: "{{ longhorn.version }}"
        release_namespace: "{{ longhorn.namespace }}"
        create_namespace: true
        values:
          persistence:
            defaultClassReplicaCount: 2
            defaultDataLocality: best-effort
          csi:
            attacherReplicaCount: 1
            provisionerReplicaCount: 2
            resizerReplicaCount: 2
            snapshotterReplicaCount: 1
          longhornUI:
            replicas: 0

    - name: Longhorn | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ longhorn.namespace }}"
        wait_sleep: 10
        wait_timeout: 360

    - name: Longhorn | Unset StorageClass local-path "default"
      kubernetes.core.k8s_json_patch:
        api_version: storage.k8s.io/v1
        kind: StorageClass
        name: local-path
        patch:
          - op: replace
            path: /metadata/annotations/storageclass.kubernetes.io~1is-default-class
            value: "false"
  when: install_longhorn
            
  rescue:
  - name: ERROR | Longhorn | Notify about failure
    tags:
      - error_handling
    ansible.builtin.debug:
      msg: "Longhorn deployment failed. Check the logs for further information."
    notify: "remove_tmp"

- name: Rancher
  tags:
    - rancher
  block:
    - name: Rancher | Install using Helm
      tags:
        - helm
      kubernetes.core.helm:
        name: rancher
        chart_ref: rancher-latest/rancher
        release_namespace: "{{ rancher.namespace }}"
        create_namespace: true
        state: present
        wait: true
        set_values:
          - value: hostname="{{ rancher.hostname }}"
            value_type: string
          - value: bootstrapPassword="{{ rancher.bootstrapPassword }}"
            value_type: raw

    - name: Rancher | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ rancher.namespace }}"
        wait_sleep: 10
        wait_timeout: 360

    - name: Rancher | Apply JSON patch to add ingressClassName Nginx
      tags:
        - nginx
      kubernetes.core.k8s_json_patch:
        namespace: "{{ rancher.namespace }}"
        kind: Ingress
        name: rancher
        patch:
          - op: add
            path: /spec/ingressClassName
            value: "nginx"
  when: install_rancher

  rescue:
  - name: ERROR | Rancher | Notify about failure
    tags:
      - error_handling
    ansible.builtin.debug:
      msg: "Rancher deployment failed. Check the logs for further information."
    notify: "remove_tmp"