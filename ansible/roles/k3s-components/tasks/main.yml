---
- name: Kube.conf
  block:
    - name: Kube.conf | Creating .kube directory
      ansible.builtin.file:
        path: "{{ path.kube_dir }}"
        state: directory
        mode: '0644'

    - name: Kube.conf | Coping k3s.yaml into .kube directory
      ansible.builtin.copy:
        src: "{{ path.k3s.conf_src }}"
        remote_src: yes
        dest: "{{ path.kube_dir }}/config"
        mode: '0400'

- name: Metallb
  block:
    - name: Metallb | Download manifest to the cluster
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/metallb/metallb/{{ metallb.version }}/config/manifests/metallb-native.yaml
        dest: "{{ path.metallb.manifest }}"
        mode: '0664'

    - name: Metallb | Apply manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ path.metallb.manifest }}"

    - name: Metallb | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ cluster_ns.metallb }}"
        wait_sleep: 10
        wait_timeout: 360
      register: metallb_deployment_status

    - name: Metallb | Create IPAddressPool manifest
      ansible.builtin.template:
        src: ipaddresses.yml.j2
        dest: "{{ path.metallb.ipaddresses }}"

    - name: Metallb | Apply IPAddressPool manifest
      kubernetes.core.k8s:
        state: present
        src: "{{ path.metallb.ipaddresses }}"

    - name: Metallb | Create L2Advertisement manifest
      ansible.builtin.template:
        src: layer2.yml.j2
        dest: "{{ path.metallb.layer2 }}"

    - name: Metallb | Apply L2Advertisement manifest
      kubernetes.core.k8s:
        state: present
        src: "{{ path.metallb.layer2 }}"

- name: Install Helm
  block:
    - name: Install Helm | Execute install script
      ansible.builtin.shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      register: helm_install
  
    - name: Install Helm | Display Helm installation output
      tags: debug
      ansible.builtin.debug:
        var: helm_install.stdout_lines

- name: Add Helm Repository
  block:
    - name: Add Helm repository | Rancher
      kubernetes.core.helm_repository:
        name: rancher-latest
        repo_url: https://releases.rancher.com/server-charts/latest

    - name: Add Helm repository | Cert-manager
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io

- name: Cert-manager
  block:
    - name: Cert-manager | Download CustomResourceDefinitions manifest
      ansible.builtin.get_url:
        url: https://github.com/jetstack/cert-manager/releases/download/{{ cert_manager.version }}/cert-manager.crds.yaml
        dest: "{{ path.cert.creds }}"
        mode: '0664'

    - name: Cert-manager | Apply CustomResourceDefinitions manifest to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ path.cert.creds }}"

    - name: Cert-manager | Install using Helm
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: "{{ cert_manager.version }}"
        release_namespace: "{{ cluster_ns.cert }}"
        create_namespace: true
      register: cert_manager_install_helm

    - name: Cert-manager | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ cluster_ns.cert }}"
        wait_sleep: 10
        wait_timeout: 360
      register: cert_manager_deployment_status

- name: Rancher
  block:
    - name: Rancher | Install using Helm
      kubernetes.core.helm:
        name: rancher
        chart_ref: rancher-latest/rancher
        release_namespace: "{{ cluster_ns.rancher }}"
        create_namespace: true
        state: present
        wait: true
        set_values:
          - value: hostname="{{ rancher.hostname }}"
            value_type: string
          - value: bootstrapPassword="{{ rancher.bootstrapPassword }}"
            value_type: raw
      register: rancher_install_helm

    - name: Rancher | Wait till the deployment is ready
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        namespace: "{{ cluster_ns.rancher }}"
        wait_sleep: 10
        wait_timeout: 360
      register: rancher_deployment_status