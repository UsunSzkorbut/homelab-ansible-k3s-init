---
# TODO check kubernetes.core modules applicability
- name: Install K3s
  block:
    - name: Install K3s | Download install script
      ansible.builtin.get_url:
        url: https://get.k3s.io
        dest: "{{ path.k3s_install }}"
        mode: '0755'

    - name: Install K3s | Run install script
      ansible.builtin.command: "sh {{ path.k3s_install }} --write-kubeconfig-mode 644 --disable servicelb"
      args:
        creates: "{{ path.k3s_bin }}"

    - name: Install K3s | Verify installation
      ansible.builtin.command: k3s --version
      register: k3s_ver

    - name: Install K3s | Output version
      tags: debug
      ansible.builtin.debug:
        msg: "Successfully installed version: {{ k3s_ver.stdout }}"

- name: Install Metallb
  ansible.builtin.command: |
    "kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb.version }}/config/manifests/metallb-native.yaml"

- name: Check Metallb deployment status
  ansible.builtin.command: kubectl rollout status deployment -n metallb-system
  register: metallb_deployment_status

- name: Display Metallb deployment output
  ansible.builtin.debug:
    var: metallb_deployment_status.stdout_lines

- name: Create IPAddressPool file for Metallb
  ansible.builtin.template:
    src: ipaddresses.yml.j2
    dest: "{{ path.metallb_ipaddresses }}"

- name: Apply IPAddressPool file for Metallb
  ansible.builtin.command: "kubectl apply -f {{ path.metallb_ipaddresses }}"

- name: Create L2Advertisement file for Metallb
  ansible.builtin.template:
    src: layer2.yml.j2
    dest: "{{ path.metallb_layer2 }}"

- name: Apply L2Advertisement file for Metallb
  shell: "kubectl apply -f {{ path.metallb_layer2 }}"

# TODO rewrite Helm
- name: Install Helm
  shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  register: helm_install
  
- name: Display Helm installation output
  debug:
    var: helm_install.stdout_lines

- name: Creating .kube directory
  ansible.builtin.file:
    path: /root/.kube/
    state: directory
    mode: '0644'

- name: Coping k3s.yaml into .kube directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /root/.kube/config
    remote_src: yes

- name: Change permission for /.kube/config for read-only 
  ansible.builtin.file:
    path: /root/.kube/config
    mode: '400' 

- name: Add Helm repositories for Rancher and Cert-manager
  shell: |
    helm repo add rancher-alpha https://releases.rancher.com/server-charts/alpha
    helm repo add jetstack https://charts.jetstack.io
    helm repo update
  register: helm_repos_add
  
- name: Display Helm repositories output
  debug:
    var: helm_repos_add.stdout_lines

- name: Apply jeststack manifest for cert-manager deployment
  shell: kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml

- name: Create namespace for cert-manager
  shell: kubectl create namespace cert-manager
  register: cert_manager_namespace
  ignore_errors: true

- name: Check cert-manager namespace status
  debug:
    var: cert_manager_namespace

- name: Install cert-manager using Helm
  shell: helm install cert-manager jetstack/cert-manager --namespace cert-manager --version {{ cert_manager_version }}
  register: cert_manager_install_helm
  when: cert_manager_namespace.rc == 0 

# - name: debug-cert-manager
#   debug:
#     var: cert_manager_install_helm

- name: Check cert-manager deployment status
  shell: kubectl rollout status deployment -n cert-manager 
  register: cert_manager_deployment_status

- name: Display cert-manager Helm deployment output
  debug:
    var: cert_manager_deployment_status.stdout_lines

- name: Create namespace for Rancher
  shell: kubectl create namespace cattle-system
  register: rancher_namespace
  ignore_errors: true

- name: Check Rancher namespace status
  debug:
    var: rancher_namespace

- name: Install Rancher using Helm
  shell: helm install rancher rancher-alpha/rancher --devel --namespace cattle-system --set hostname=rancher.homelab.local --set bootstrapPassword=admin 
  register: rancher_install_helm
  # when: rancher_namespace.rc == 0 

- name: Check Rancher deployment status
  shell: kubectl rollout status deployment/rancher -n cattle-system 
  register: rancher_deployment_status
  
- name: Display Rancher deployment status output
  debug:
    var: rancher_deployment_status.stdout_lines
